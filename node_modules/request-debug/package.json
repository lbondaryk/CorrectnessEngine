{
  "name": "request-debug",
  "author": {
    "name": "James Nylen",
    "email": "jnylen@gmail.com"
  },
  "description": "Library to assist with debugging HTTP(s) requests made by the request module.",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/nylen/request-debug"
  },
  "bugs": {
    "url": "https://github.com/nylen/request-debug/issues"
  },
  "license": "MIT",
  "keywords": [
    "request",
    "debug",
    "http",
    "https",
    "headers"
  ],
  "scripts": {
    "test": "node node_modules/.bin/mocha"
  },
  "main": "index.js",
  "devDependencies": {
    "express": "~4.8.6",
    "mocha": "~1.21.4",
    "passport": "~0.2.0",
    "passport-http": "~0.2.2",
    "request": "~2.40.0",
    "should": "~4.0.4"
  },
  "dependencies": {
    "clone": "~0.1.18"
  },
  "readme": "# request-debug [![Build status](https://img.shields.io/travis/nylen/request-debug.svg?style=flat)](https://travis-ci.org/nylen/request-debug) [![npm package](http://img.shields.io/npm/v/request-debug.svg?style=flat)](https://www.npmjs.org/package/request-debug)\n\nThis Node.js module provides an easy way to debug HTTP(S) requests performed by\nthe [`request` module](https://github.com/mikeal/request), and their responses\nfrom external servers.\n\n## Usage\n\nBasic usage is to require the module and call it, passing in the object\nreturned by `require('request')`:\n\n```js\nvar request = require('request');\n\nrequire('request-debug')(request);\n```\n\nThis will set up event handlers on every request performed with the `request`\nvariable from this point.\n\nYou can also specify a function to handle request or response data:\n\n```js\nrequire('request-debug')(request, function(type, data) {\n    // put your request or response handling logic here\n});\n```\n\nIf you specify your own handling function, `type` will be one of the following values:\n\n- **request** - Headers were sent to the server and will be included as\n  `data.headers`.  `data.body` may also be present for POST requests.\n\n- **response** - Headers were received from the server and will be included as\n  `data.headers`.  Note that `request` only buffers the response body if a\n  callback was given, so it will only be available as `data.body` if the\n  initial call to `request` included a callback.\n\n- **redirect** - A redirect status code (*HTTP 3xx*) was received.  The `data`\n  object will have properties `statusCode`, `headers`, and `uri` (the address\n  of the next request).\n\n- **auth** - A *HTTP 401 Unathorized* response was received.  Internally,\n  `request` handles this like a redirect, so the same properties will be\n  available on the `data` object.\n\nThe default handling function writes the data to *stderr* in Node's JSON-like object\ndisplay format.  See the example below for more details.\n\nTo disable debugging, call `request.stopDebugging()` (this function only exists\nif debugging has already been enabled).  Any requests that are in progress when\n`stopDebugging()` is called will still generate debug events.\n\n## Example\n\n```js\nvar request = require('request');\n\nrequire('request-debug')(request);\n\n// digest.php is example 2 from:\n// http://php.net/manual/en/features.http-auth.php\n\nrequest({\n    uri  : 'http://nylen.tv/digest.php',\n    auth : {\n        user : 'admin',\n        pass : 'mypass',\n        sendImmediately : false\n    },\n    rejectUnauthorized : false,\n}, function(err, res, body) {\n    console.log('REQUEST RESULTS:', err, res.statusCode, body);\n});\n```\n\nUnless you provide your own function as the second parameter to the\n`request-debug` call, this will produce console output similar to the\nfollowing:\n\n```js\n{ request: \n   { uri: 'http://nylen.tv/digest.php',\n     method: 'GET',\n     headers: { host: 'nylen.tv' } } }\n{ auth: \n   { statusCode: 401,\n     headers: \n      { date: 'Fri, 29 Aug 2014 00:10:11 GMT',\n        server: 'Apache/2.4.6 (Debian)',\n        'x-powered-by': 'PHP/5.5.6-1',\n        'www-authenticate': 'Digest realm=\"Restricted area\",qop=\"auth\",nonce=\"53ffc4e3f308e\",opaque=\"cdce8a5c95a1427d74df7acbf41c9ce0\"',\n        'content-length': '39',\n        'keep-alive': 'timeout=5, max=100',\n        connection: 'Keep-Alive',\n        'content-type': 'text/html' },\n     uri: 'http://nylen.tv/digest.php' } }\n{ request: \n   { uri: 'http://nylen.tv/digest.php',\n     method: 'GET',\n     headers: \n      { authorization: 'Digest username=\"admin\", realm=\"Restricted area\", nonce=\"53ffc4e3f308e\", uri=\"/digest.php\", qop=auth, response=\"d7c6bf1c2657228e146da3edf034a419\", nc=00000001, cnonce=\"4fa4a6af3d1d424397cb2c798d5a97df\", opaque=\"cdce8a5c95a1427d74df7acbf41c9ce0\"',\n        host: 'nylen.tv' } } }\n{ response: \n   { headers: \n      { date: 'Fri, 29 Aug 2014 00:10:12 GMT',\n        server: 'Apache/2.4.6 (Debian)',\n        'x-powered-by': 'PHP/5.5.6-1',\n        'content-length': '27',\n        'keep-alive': 'timeout=5, max=100',\n        connection: 'Keep-Alive',\n        'content-type': 'text/html' },\n     statusCode: 200,\n     body: 'You are logged in as: admin' } }\nREQUEST RESULTS: null 200 'You are logged in as: admin'\n```\n\n## Compatibility\n\nTested with Node.js versions 0.8.x, 0.10.x, and 0.11.x on Travis.\n\nDoes not work with `request` versions older than 2.22.0 (July 2013).  Tests\ndon't start passing until version 2.28.0 (December 2013).\n",
  "readmeFilename": "README.md",
  "_id": "request-debug@0.0.3",
  "dist": {
    "shasum": "7a006f00d7f7426d887c64b40c39f2fb3ac1a3df"
  },
  "_from": "request-debug@",
  "_resolved": "https://registry.npmjs.org/request-debug/-/request-debug-0.0.3.tgz"
}
